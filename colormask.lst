     1                                  section .text
     2                                  global colormask
     3                                  
     4                                  colormask:
     5 00000000 55                          push ebp
     6 00000001 89E5                        mov ebp, esp
     7 00000003 53                          push ebx
     8 00000004 56                          push esi
     9 00000005 57                          push edi
    10                                  
    11                                      ; [ebp + 8] = img (void *)
    12                                      ; [ebp + 12] = width (uint32_t)
    13                                      ; [ebp + 16] = height (uint32_t)
    14                                      ; [ebp + 20] = mask_img (void *)
    15                                      ; [ebp + 24] = mask_width (uint32_t)
    16                                      ; [ebp + 28] = mask_height (uint32_t)
    17                                      ; [ebp + 32] = x (uint32_t)
    18                                      ; [ebp + 36] = y (uint32_t)
    19                                      ; [ebp + 40] = color1 (uint32_t)
    20                                      ; [ebp + 44] = color2 (uint32_t)
    21                                      ; [ebp + 48] = color3 (uint32_t)
    22                                  
    23 00000006 8B4D08                      mov ecx, [ebp + 8]      ; ecx = img
    24 00000009 8B5514                      mov edx, [ebp + 20]     ; edx = mask_img
    25 0000000C 8B7520                      mov esi, [ebp + 32]     ; esi = x
    26 0000000F BF00000000                  mov edi, 0              ; edi = x_mask
    27                                  
    28                                  mask:
    29 00000014 8B4518                      mov eax, [ebp + 24]     ; eax = mask_width
    30 00000017 39C6                        cmp esi, eax            ; if x = mask_width then next_row
    31 00000019 7434                        je next_row
    32                                  
    33 0000001B 8B450C                      mov eax, [ebp + 12]     ; eax = width
    34 0000001E 39C6                        cmp esi, eax            ; if x = width then next_row
    35 00000020 742D                        je next_row
    36                                  
    37 00000022 8B4524                      mov eax, [ebp + 36]
    38 00000025 8B5D10                      mov ebx, [ebp + 16]     ; ebx = height
    39 00000028 4B                          dec ebx                 ; ebx -= 1
    40 00000029 29C3                        sub ebx, eax            ; mask_y = height - 1 - y
    41                                  
    42 0000002B 8B450C                      mov eax, [ebp + 12]     ; width
    43 0000002E 0FAFD8                      imul ebx, eax           ; mask_y * width
    44 00000031 01F3                        add ebx, esi            ; + x
    45 00000033 6BDB03                      imul ebx, 3             ; offset w bajtach
    46                                  
    47                                  
    48                                      mov eax,
    48          ******************       error: invalid combination of opcode and operands
    49                                  
    50                                  
    51                                      ; kopiowanie koloru z maski do obrazu
    52 00000036 8A041A                      mov al, [edx + ebx]     ; save B of pixel in mask_img to al
    53 00000039 880419                      mov [ecx + ebx], al     ; save B of pixel in mask as al
    54 0000003C 8A441A01                    mov al, [edx + ebx + 1] ; save G of pixel in mask_img to al
    55 00000040 88441901                    mov [ecx + ebx + 1], al ; save G of pixel in mask as al
    56 00000044 8A441A02                    mov al, [edx + ebx + 2] ; save R of pixel in mask_img to al
    57 00000048 88441902                    mov [ecx + ebx + 2], al ; save R of pixel in mask as al
    58                                  
    59 0000004C 46                          inc esi     ; increment x
    60 0000004D EBC5                        jmp mask
    61                                  
    62                                  next_row:
    63 0000004F 8B7520                      mov esi, [ebp + 32]     ; set current x as given x
    64 00000052 8B4524                      mov eax, [ebp + 36]
    65 00000055 40                          inc eax                 ; inc y
    66 00000056 894524                      mov [ebp + 36], eax
    67                                  
    68 00000059 8B5D10                      mov ebx, [ebp + 16]     ; height
    69 0000005C 39D8                        cmp eax, ebx            ; if y = height then mask else exit
    70 0000005E 7CB4                        jl mask
    71 00000060 7D09                        jge exit
    72                                  
    73 00000062 8B5D1C                      mov ebx, [ebp + 28]     ; mask_height
    74 00000065 39D8                        cmp eax, ebx            ; if y = mask_height then mask else exit
    75 00000067 7CAB                        jl mask
    76 00000069 7D00                        jge exit
    77                                  
    78                                  exit:
    79 0000006B 5F                          pop edi
    80 0000006C 5E                          pop esi
    81 0000006D 5B                          pop ebx
    82 0000006E 5D                          pop ebp
    83 0000006F C3                          ret
