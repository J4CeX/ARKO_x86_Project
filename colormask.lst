     1                                  section .text
     2                                  global colormask
     3                                  
     4                                  colormask:
     5 00000000 55                          push ebp
     6 00000001 89E5                        mov ebp, esp
     7 00000003 53                          push ebx
     8 00000004 56                          push esi
     9 00000005 57                          push edi
    10 00000006 83EC08                      sub esp, 8
    11                                  
    12                                      ; [ebp + 8] = img (void *)
    13                                      ; [ebp + 12] = width (uint32_t)
    14                                      ; [ebp + 16] = height (uint32_t)
    15                                      ; [ebp + 20] = mask_img (void *)
    16                                      ; [ebp + 24] = mask_width (uint32_t)
    17                                      ; [ebp + 28] = mask_height (uint32_t)
    18                                      ; [ebp + 32] = x (uint32_t)
    19                                      ; [ebp + 36] = y (uint32_t)
    20                                      ; [ebp + 40] = color1 (uint32_t)
    21                                      ; [ebp + 44] = color2 (uint32_t)
    22                                      ; [ebp + 48] = color3 (uint32_t)
    23                                  
    24 00000009 8B4D08                      mov ecx, [ebp + 8]      ; ecx = img
    25 0000000C 8B5514                      mov edx, [ebp + 20]     ; edx = mask_img
    26 0000000F 8B7520                      mov esi, [ebp + 32]     ; esi = x
    27 00000012 8B7D24                      mov edi, [ebp + 36]     ; edi = y
    28                                  
    29 00000015 C7042400000000              mov dword [esp + 0], 0
    30 0000001C C744240400000000            mov dword [esp + 4], 0
    31                                  
    32                                  mask:
    33 00000024 8B4518                      mov eax, [ebp + 24]     ; eax = mask_width
    34 00000027 39C6                        cmp esi, eax            ; if x = mask_width then next_row
    35 00000029 7431                        je next_row
    36                                  
    37 0000002B 8B450C                      mov eax, [ebp + 12]     ; eax = width
    38 0000002E 39C6                        cmp esi, eax            ; if x = width then next_row
    39 00000030 742A                        je next_row
    40                                  
    41 00000032 8B5D10                      mov ebx, [ebp + 16]     ; ebx = height
    42 00000035 4B                          dec ebx                 ; ebx -= 1
    43 00000036 29FB                        sub ebx, edi            ; mask_y = height - 1 - y
    44                                  
    45 00000038 8B450C                      mov eax, [ebp + 12]     ; width
    46 0000003B 0FAFD8                      imul ebx, eax           ; mask_y * width
    47 0000003E 01F3                        add ebx, esi            ; + x
    48 00000040 6BDB03                      imul ebx, 3             ; offset w bajtach
    49                                  
    50                                  
    51                                      ; kopiowanie koloru z maski do obrazu
    52 00000043 8A041A                      mov al, [edx + ebx]     ; save B of pixel in mask_img to al
    53 00000046 880419                      mov [ecx + ebx], al     ; save B of pixel in mask as al
    54 00000049 8A441A01                    mov al, [edx + ebx + 1] ; save G of pixel in mask_img to al
    55 0000004D 88441901                    mov [ecx + ebx + 1], al ; save G of pixel in mask as al
    56 00000051 8A441A02                    mov al, [edx + ebx + 2] ; save R of pixel in mask_img to al
    57 00000055 88441902                    mov [ecx + ebx + 2], al ; save R of pixel in mask as al
    58                                  
    59 00000059 46                          inc esi     ; increment x
    60 0000005A EBC8                        jmp mask
    61                                  
    62                                  next_row:
    63 0000005C 8B7520                      mov esi, [ebp + 32]     ; set current x as given x
    64 0000005F 47                          inc edi                 ; inc y
    65                                  
    66 00000060 8B5D10                      mov ebx, [ebp + 16]     ; height
    67 00000063 39DF                        cmp edi, ebx            ; if y = height then mask else exit
    68 00000065 7CBD                        jl mask
    69 00000067 7D09                        jge exit
    70                                  
    71 00000069 8B5D1C                      mov ebx, [ebp + 28]     ; mask_height
    72 0000006C 39DF                        cmp edi, ebx            ; if y = mask_height then mask else exit
    73 0000006E 7CB4                        jl mask
    74 00000070 7D00                        jge exit
    75                                  
    76                                  exit:
    77 00000072 83C408                      add esp, 8
    78 00000075 5F                          pop edi
    79 00000076 5E                          pop esi
    80 00000077 5B                          pop ebx
    81 00000078 5D                          pop ebp
    82 00000079 C3                          ret
