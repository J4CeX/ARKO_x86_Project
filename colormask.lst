     1                                  section .text
     2                                  global colormask
     3                                  
     4                                  colormask:
     5 00000000 55                          push ebp
     6 00000001 89E5                        mov ebp, esp
     7 00000003 53                          push ebx
     8 00000004 56                          push esi
     9 00000005 57                          push edi
    10 00000006 83EC10                      sub esp, 16
    11                                  
    12                                      ; [ebp + 8] = img (void *)
    13                                      ; [ebp + 12] = width (uint32_t)
    14                                      ; [ebp + 16] = height (uint32_t)
    15                                      ; [ebp + 20] = mask_img (void *)
    16                                      ; [ebp + 24] = mask_width (uint32_t)
    17                                      ; [ebp + 28] = mask_height (uint32_t)
    18                                      ; [ebp + 32] = x (uint32_t)
    19                                      ; [ebp + 36] = y (uint32_t)
    20                                      ; [ebp + 40] = color1 (uint32_t)
    21                                      ; [ebp + 44] = color2 (uint32_t)
    22                                      ; [ebp + 48] = color3 (uint32_t)
    23                                  
    24 00000009 8B7520                      mov esi, [ebp + 32]     ; esi = current x
    25                                  
    26 0000000C C7042400000000              mov dword [esp + 0], 0  ; x_mask
    27 00000013 C744240400000000            mov dword [esp + 4], 0  ; y_mask
    28 0000001B C744240800000000            mov dword [esp + 8], 0
    29 00000023 C744240C00000000            mov dword [esp + 12], 0
    30                                  
    31                                  mask:
    32 0000002B 8B4518                      mov eax, [ebp + 24]     ; eax = mask_width
    33 0000002E 390424                      cmp [esp + 0], eax            ; if x_mask = mask_width then next_row
    34 00000031 0F8D3E010000                jge next_row
    35                                  
    36 00000037 8B450C                      mov eax, [ebp + 12]     ; eax = width
    37 0000003A 39C6                        cmp esi, eax            ; if x = width then next_row
    38 0000003C 0F8D33010000                jge next_row
    39                                  
    40 00000042 8B7D24                      mov edi, [ebp + 36]     ; edi = current y
    41                                  
    42 00000045 8B4510                      mov eax, [ebp + 16]     ; eax = height
    43 00000048 48                          dec eax                 ; eax -= 1
    44 00000049 29F8                        sub eax, edi            ; y = height - 1 - y
    45 0000004B 0FAF450C                    imul eax, [ebp + 12]    ; y * width
    46 0000004F 01F0                        add eax, esi            ; + x
    47 00000051 6BC003                      imul eax, 3             ; offset w bajtach
    48 00000054 89442408                    mov [esp + 8], eax
    49                                  
    50 00000058 8B7C2404                    mov edi, [esp + 4]
    51                                  
    52 0000005C 8B451C                      mov eax, [ebp + 28]     ; eax = mask_height
    53 0000005F 48                          dec eax                 ; eax -= 1
    54 00000060 29F8                        sub eax, edi            ; y_mask = mask_height - 1 - y
    55 00000062 0FAF4518                    imul eax, [ebp + 24]    ; y_mask * mask_width
    56 00000066 030424                      add eax, [esp + 0]      ; + x_mask
    57 00000069 6BC003                      imul eax, 3             ; offset w bajtach
    58 0000006C 8944240C                    mov [esp + 12], eax
    59                                  
    60                                  
    61                                      ; === RED ===
    62 00000070 8B5D14                      mov ebx, [ebp + 20]     ; ebx = mask_img
    63 00000073 8B7C240C                    mov edi, [esp + 12]
    64 00000077 0FB6443B02                  movzx eax, byte [ebx + edi + 2]
    65 0000007C 0FB6543B01                  movzx edx, byte [ebx + edi + 1]
    66 00000081 0FB60C3B                    movzx ecx, byte [ebx + edi]
    67                                  
    68 00000085 8B5D28                      mov ebx, [ebp + 40]
    69 00000088 C1EB10                      shr ebx, 16
    70 0000008B 81E3FF000000                and ebx, 0xFF
    71 00000091 0FAFC3                      imul eax, ebx
    72                                  
    73 00000094 8B5D2C                      mov ebx, [ebp + 44]
    74 00000097 C1EB10                      shr ebx, 16
    75 0000009A 81E3FF000000                and ebx, 0xFF
    76 000000A0 0FAFD3                      imul edx, ebx
    77                                  
    78 000000A3 8B5D30                      mov ebx, [ebp + 48]
    79 000000A6 C1EB10                      shr ebx, 16
    80 000000A9 81E3FF000000                and ebx, 0xFF
    81 000000AF 0FAFCB                      imul ecx, ebx
    82                                  
    83 000000B2 01D0                        add eax, edx
    84 000000B4 01C8                        add eax, ecx
    85 000000B6 25FF000000                  and eax, 0xFF
    86 000000BB 8B5C2408                    mov ebx, [esp + 8]
    87 000000BF 8B4D08                      mov ecx, [ebp + 8]
    88 000000C2 88441902                    mov [ecx + ebx + 2], al
    89                                  
    90                                  
    91                                      ; === GREEN ===
    92 000000C6 8B5D14                      mov ebx, [ebp + 20]     ; ebx = mask_img
    93 000000C9 8B7C240C                    mov edi, [esp + 12]
    94 000000CD 0FB6443B02                  movzx eax, byte [ebx + edi + 2]
    95 000000D2 0FB6543B01                  movzx edx, byte [ebx + edi + 1]
    96 000000D7 0FB60C3B                    movzx ecx, byte [ebx + edi]
    97                                  
    98 000000DB 8B5D28                      mov ebx, [ebp + 40]
    99 000000DE C1EB08                      shr ebx, 8
   100 000000E1 81E3FF000000                and ebx, 0xFF
   101 000000E7 0FAFC3                      imul eax, ebx
   102                                  
   103 000000EA 8B5D2C                      mov ebx, [ebp + 44]
   104 000000ED C1EB08                      shr ebx, 8
   105 000000F0 81E3FF000000                and ebx, 0xFF
   106 000000F6 0FAFD3                      imul edx, ebx
   107                                  
   108 000000F9 8B5D30                      mov ebx, [ebp + 48]
   109 000000FC C1EB08                      shr ebx, 8
   110 000000FF 81E3FF000000                and ebx, 0xFF
   111 00000105 0FAFCB                      imul ecx, ebx
   112                                  
   113 00000108 01D0                        add eax, edx
   114 0000010A 01C8                        add eax, ecx
   115 0000010C 25FF000000                  and eax, 0xFF
   116 00000111 8B5C2408                    mov ebx, [esp + 8]
   117 00000115 8B4D08                      mov ecx, [ebp + 8]
   118 00000118 88441901                    mov [ecx + ebx + 1], al
   119                                  
   120                                  
   121                                      ; === BLUE ===
   122 0000011C 8B5D14                      mov ebx, [ebp + 20]     ; ebx = mask_img
   123 0000011F 8B7C240C                    mov edi, [esp + 12]
   124 00000123 0FB6443B02                  movzx eax, byte [ebx + edi + 2]
   125 00000128 0FB6543B01                  movzx edx, byte [ebx + edi + 1]
   126 0000012D 0FB60C3B                    movzx ecx, byte [ebx + edi]
   127                                  
   128 00000131 8B5D28                      mov ebx, [ebp + 40]
   129 00000134 81E3FF000000                and ebx, 0xFF
   130 0000013A 0FAFC3                      imul eax, ebx
   131                                  
   132 0000013D 8B5D2C                      mov ebx, [ebp + 44]
   133 00000140 81E3FF000000                and ebx, 0xFF
   134 00000146 0FAFD3                      imul edx, ebx
   135                                  
   136 00000149 8B5D30                      mov ebx, [ebp + 48]
   137 0000014C 81E3FF000000                and ebx, 0xFF
   138 00000152 0FAFCB                      imul ecx, ebx
   139                                  
   140 00000155 01D0                        add eax, edx
   141 00000157 01C8                        add eax, ecx
   142 00000159 25FF000000                  and eax, 0xFF
   143 0000015E 8B5C2408                    mov ebx, [esp + 8]
   144 00000162 8B4D08                      mov ecx, [ebp + 8]
   145 00000165 880419                      mov [ecx + ebx], al
   146                                  
   147                                  
   148 00000168 46                          inc esi     ; increment x
   149 00000169 8B0424                      mov eax, [esp + 0]
   150 0000016C 40                          inc eax             ; increment x_mask
   151 0000016D 890424                      mov [esp + 0], eax
   152 00000170 E9B6FEFFFF                  jmp mask
   153                                  
   154                                  
   155                                  
   156                                  next_row:
   157 00000175 8B7520                      mov esi, [ebp + 32]     ; set current x as given x
   158 00000178 C7042400000000              mov dword [esp + 0], 0  ; set current x_mask as given x_mask
   159                                  
   160 0000017F 8B4524                      mov eax, [ebp + 36]
   161 00000182 40                          inc eax                 ; inc y
   162 00000183 894524                      mov [ebp + 36], eax
   163                                  
   164 00000186 8B442404                    mov eax, [esp + 4]
   165 0000018A 40                          inc eax                 ; inc y_mask
   166 0000018B 89442404                    mov [esp + 4], eax
   167                                  
   168 0000018F 8B5D10                      mov ebx, [ebp + 16]     ; height
   169 00000192 395D24                      cmp [ebp + 36], ebx            ; if y = height then mask else exit
   170 00000195 7D0E                        jge exit
   171                                  
   172 00000197 8B5D1C                      mov ebx, [ebp + 28]     ; mask_height
   173 0000019A 395C2404                    cmp [esp + 4], ebx            ; if y_mask = mask_height then mask else exit
   174 0000019E 7D05                        jge exit
   175                                  
   176 000001A0 E986FEFFFF                  jmp mask
   177                                  
   178                                  exit:
   179 000001A5 83C410                      add esp, 16
   180 000001A8 5F                          pop edi
   181 000001A9 5E                          pop esi
   182 000001AA 5B                          pop ebx
   183 000001AB 5D                          pop ebp
   184 000001AC C3                          ret
