     1                                  section .text
     2                                  global colormask
     3                                  
     4                                  colormask:
     5 00000000 55                          push ebp
     6 00000001 89E5                        mov ebp, esp
     7 00000003 53                          push ebx
     8 00000004 56                          push esi
     9 00000005 57                          push edi
    10                                  
    11                                      ; [ebp + 8] = img (void *)
    12                                      ; [ebp + 12] = width (uint32_t)
    13                                      ; [ebp + 16] = height (uint32_t)
    14                                      ; [ebp + 20] = mask_img (void *)
    15                                      ; [ebp + 24] = mask_width (uint32_t)
    16                                      ; [ebp + 28] = mask_height (uint32_t)
    17                                      ; [ebp + 32] = x (uint32_t)
    18                                      ; [ebp + 36] = y (uint32_t)
    19                                      ; [ebp + 40] = color1 (uint32_t)
    20                                      ; [ebp + 44] = color2 (uint32_t)
    21                                      ; [ebp + 48] = color3 (uint32_t)
    22                                  
    23 00000006 8B4D08                      mov ecx, [ebp + 8]      ; ecx = img
    24 00000009 8B5514                      mov edx, [ebp + 20]     ; edx = mask_img
    25 0000000C 8B7520                      mov esi, [ebp + 32]     ; esi = x
    26 0000000F 8B4524                      mov eax, [ebp + 36]     ; eax = y
    27                                  
    28                                  mask:
    29 00000012 8B5D0C                      mov ebx, [ebp + 12]     ; width
    30 00000015 39DE                        cmp esi, ebx            ; if x = width then next_row
    31 00000017 742D                        je next_row
    32                                  
    33 00000019 8B4524                      mov eax, [ebp + 36]     ; eax = y
    34 0000001C 8B5D1C                      mov ebx, [ebp + 28]     ; mask_height
    35 0000001F 4B                          dec ebx
    36 00000020 29C3                        sub ebx, eax            ; mask_y = mask_height - 1 - y
    37                                  
    38 00000022 8B4518                      mov eax, [ebp + 24]     ; mask_width
    39 00000025 0FAFD8                      imul ebx, eax           ; mask_y * mask_width
    40 00000028 01F3                        add ebx, esi            ; + x
    41 0000002A 6BDB03                      imul ebx, 3             ; offset w bajtach
    42                                  
    43                                      ; kopiowanie koloru z maski do obrazu
    44 0000002D 8A041A                      mov al, [edx + ebx]     ; save B of pixel in mask_img to al
    45 00000030 880419                      mov [ecx + ebx], al     ; save B of pixel in mask as al
    46 00000033 8A441A01                    mov al, [edx + ebx + 1] ; save G of pixel in mask_img to al
    47 00000037 88441901                    mov [ecx + ebx + 1], al ; save G of pixel in mask as al
    48 0000003B 8A441A02                    mov al, [edx + ebx + 2] ; save R of pixel in mask_img to al
    49 0000003F 88441902                    mov [ecx + ebx + 2], al ; save R of pixel in mask as al
    50                                  
    51 00000043 46                          inc esi     ; increment x
    52 00000044 EBCC                        jmp mask
    53                                  
    54                                  next_row:
    55 00000046 8B7520                      mov esi, [ebp + 32]     ; set current x as given x
    56 00000049 8B4524                      mov eax, [ebp + 36]     ; eax = y
    57 0000004C 40                          inc eax                 ; inc y
    58 0000004D 894524                      mov [ebp + 36], eax     ; save y
    59                                  
    60 00000050 8B5D10                      mov ebx, [ebp + 16]     ; height
    61 00000053 39D8                        cmp eax, ebx            ; if y = height then mask
    62 00000055 7CBB                        jl mask
    63                                  
    64                                  exit:
    65 00000057 5F                          pop edi
    66 00000058 5E                          pop esi
    67 00000059 5B                          pop ebx
    68 0000005A 5D                          pop ebp
    69 0000005B C3                          ret
